This is a hack.  This is so bad. :(

http://lists.science.uu.nl/pipermail/nix-dev/2013-October/011891.html

We have to link our haskell binaries against libgcc_s, otherwise
threaded programs fail with:
  libgcc_s.so.1 must be installed for pthread_cancel to work.

Actually, we wouldn't have to link, we just have to make sure that
libgcc_s.so.1 can be found at runtime.  But because of Nix, the
library is not at a standard place but somewhere in /nix/store.  So
the easiest solution is to link.  That makes the dependency explicit:
if a nix-garbage-collect deletes it, we will notice.  Explicit
dependency is also helpful when someone tries to make an all-inclusive
distribution bundle.

So this is why we add -lgcc_s to NIX_LDFLAGS in GHC.pm.

OTOH there is always a but.

But, there is no libgcc_s.a.  Therefore if someone tries to use static
linking while NIX_LDFLAGS is set, it will fail.

So what we want is a GNU ld option like this:
-l-only-when-you-re-linking-dynamically-gcc_s.  I couldn't find such
an option, therefore I include an empty archive file here that can be
used as libgcc_s.a when linking statically.
