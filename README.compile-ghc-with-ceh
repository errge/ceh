first time source setup: http://hackage.haskell.org/trac/ghc/wiki/Building/GettingTheSources
  git clone http://git.haskell.org/ghc
  cd ghc
  ./sync-all get

to get new stuff later:
  ./sync-all pull

building docs: http://hackage.haskell.org/trac/ghc/wiki/Building/Hacking
  export LANG=en_US.UTF-8     (ghc only builds on utf-8)
  perl --version >/dev/null   (if this has output, you don't have locales, fix it!)

  /opt/ceh/scripts/ghc-build-shell.pl
  (or CEH_GHC64=1 /opt/ceh/scripts/ghc-build-shell.pl, if building 64-bit GHC)
    (This gets you a shell that is properly set up to use ceh's ghc as
     the bootstrap compiler and provides also the other needed tools:
     perl, gnumake, m4, autoconf, automake.)

    (After this, do everything in the resulting shell!)

    cp mk/build.mk.sample mk/build.mk
    vi mk/build.mk (change BuildFlavour to quick)

    perl boot
    ./configure --prefix=$HOME/wherever-i-want
    grep -r with-cc=.usr.bin.gcc .       (should have no results, if everything is properly using ceh)
    make -j 4                            (parallel building seems to be a bit buggy, so run again if fails)

    inplace/bin/ghc-stage2 --version

    (if you want to run ghci, do this:)
    export LD_LIBRARY_PATH=/nix/var/nix/profiles/ceh/ghc-build-bin/lib
    inplace/bin/ghc-stage2 --interactive

    make install (if you want)

To install a package in the new ghc:
  /opt/ceh/scripts/ghc-build-shell.pl
  (or CEH_GHC64=1 /opt/ceh/scripts/ghc-build-shell.pl, if building 64-bit GHC)
    export PATH=$HOME/wherever-i-want:$PATH
    cabal update
    # quick doesn't provide library profiling
    cabal --disable-library-profiling install stm

To run the testsuite:
  /opt/ceh/scripts/ghc-build-shell.pl
  (or CEH_GHC64=1 /opt/ceh/scripts/ghc-build-shell.pl, if building 64-bit GHC)
    CPUS=4 sh validate

Stuff to read while hacking GHC:
  http://hackage.haskell.org/trac/ghc/wiki/Building/Hacking
  http://hackage.haskell.org/trac/ghc/wiki/Debugging/RuntimeSystem
  http://hackage.haskell.org/trac/ghc/wiki/TestingPatches
  http://hackage.haskell.org/trac/ghc/wiki/Commentary/Rts/Scheduler
  http://hackage.haskell.org/trac/ghc/wiki/Commentary/Rts/STM
  http://hackage.haskell.org/trac/ghc/wiki/Commentary/Rts
  (and of course anything from the commentary is interesting!)
