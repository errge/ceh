* Power-user environment to share
+ Agreements and a repository for a shared GNU/Linux power-user environment.
+ So that it's easy to work on shared projects (e.g. the haskell
  header can be =#!/opt/ceh/bin/runhaskell -i /opt/ceh/p/ourproject=,
  instead of some complicated perl one-liner).
+ So that the packages are available with the same version on our
  machines (e.g. =emacs= and =ghc=).
+ These agreements are intentionally based on simple unifications
  instead of abstractions (e.g. =/opt/ceh/home= has to be a symlink
  for the user's home directory, no need to =$HOME= or tilde lookups
  anymore).
+ We use i686 Nix for package management and if you can decide the
  distribution that you use as a base system, we recommend i686 Debian
  (maybe with amd64 kernel, if you sometimes need the extra registers
  and stuff for your own programs).  But the point is that this should
  work on any modern GNU/Linux, we also tested Ubuntu lucid and precise.


* Requirements
+ Modern GNU/Linux distro (ubuntu, debian, etc.).
+ Intel architecture (i686 or amd64, no arm).
+ The machine only has one user who wants to use ceh and nix and she
  will be the owner of the files in =/opt/ceh= and =/nix=.
+ Root privileges for the installation.  Actually only needed for the
  creation of =/opt/ceh= and =/nix=, not needed for everyday usage or
  package installation.
+ =/etc/passwd= contains your user, so nix doesn't have to use any
  fancy NSS modules.
+ The user uses bash or zsh.  This is because he has to source
  =/opt/ceh/scripts/ceh-profile.sh= which supports these two shells.
  Patches are welcome for other shells.


* Installation instructions
: sudo mkdir /opt/ceh /nix
: sudo chown $USER. /opt/ceh /nix
: chmod 0700 /opt/ceh /nix
: cd /opt/ceh
: git clone git://github.com/errge/ceh.git .
: ln -s $HOME home
: /opt/ceh/scripts/ceh-init.sh


* Everyday usage
In the =/opt/ceh/bin= directory there are small wrapper scripts.  Those
install the required pacakages for the wrapped binaries on first run.

=/opt/ceh/bin= is put into =$PATH= by =/opt/ceh/scripts/ceh-profile.sh=,
that you're supposed to source from your =~/.bashrc=.

*** Exclusions: ignoring programs provided by ceh
If for any reason you prefer to ignore one of our provided binaries,
you can use the =ceh_exclude= script to create a symlink from
=/opt/ceh/bin-user/= to the other version of the binary in your =PATH=.

If you don't want the exclusion anymore, just delete the symlink.

*** Troubleshooting if something is broken after git pull
Sometimes there are package name changes and other complications that
can cause filename collissions or dynamic linking issues after a =git
pull= in =/opt/ceh=.  The easiest thing to try in that case is to
remove all the nix profiles that is used by ceh.  This will ensure
that we can install all the packages afresh:
: rm /nix/var/nix/profiles/ceh/*

This operation will be cheap, because everything is already downloaded
and built in =/nix/store= (so don't run =nix-collect-garbage= or
=ceh_collect_garbage= before running your favorite binaries at least
once).

Also, sometimes we have to upgrade the nix package itself inside ceh.
The nix package manager executable itself is unpacked when
=ceh-init.sh= is ran for the first time.  So, if we upgrade that,
users have to run =ceh-upgrade.sh= to download and install the new
version.  The profile script (ceh-profile.sh) tries to warn you when
this happens, but you can check for this explicitly by checking that
path stored in =$CEH_NIX= exists on your system.  If it doesn't, just
go ahead and run =ceh-upgrade.sh=.

*** Disable the binary cache, for fun and profit
You may just want to see if it's still possible to build a software
from source, instead of using the nix binary cache.  Or the nix binary
cache is down and you still want to install packages instead of having
a break until it's back.

In both cases, you can just set =$CEH_NO_BIN_CACHE= to 1 and then the
wrapper scripts will start building packages instead of using the
binary cache.

When you do this, you may also want to set =$CEH_BUILD_MAX_JOBS= to
the number of your processor cores in the system, because usually
building of tools (like compilers, linkers, make, etc.) can be
parallelized by nix.


* Upgrade notes
*** 2013-08-05: ~/.nix-profile reserved for the user
The =/nix/var/nix/profiles/per-user/root/profile= profile (which is
symlinked by default from =$HOME/.nix-profile=) is not used for
installations anymore.  Earlier versions of ceh used to install
packages there, but now that profile is reserved for the user.

This is good, because if you need some package (e.g. =vim=) quickly
from the nixpkgs version that is current the ceh baseline, you can
just do:
: ceh_nixpkgs_install vim
: ~/.nix-profile/bin/vim

Alternatively, you can use the most up-to-date nixpkgs:
: nix-channel --add http://nixos.org/releases/nixpkgs/channels/nixpkgs-unstable
: nix-channel --update
: nix-env -i vim
: ~/.nix-profile/bin/vim

No need to create a wrapper in =/opt/ceh= just for a quick test.  If
you want to get rid of your user profile, simply delete
=/nix/var/nix/profiles/per-user/$USER/profile*=.  This is from now on
is totally separate from ceh's own nix profiles.  Those are located in
=/nix/var/nix/profiles/ceh/*=.

If you're upgrading =ceh= from a version, where the default profile
was used for package installations, please delete
=/nix/var/nix/profiles/per-user/root/profile*=.

*** 2013-08-15: renames
nix-init.sh    -> ceh-init.sh
nix-profile.sh -> ceh-profile.sh
nix-purge.sh   -> ceh-purge.sh
nix-upgrade.sh -> ceh-upgrade.sh

And install-world.sh and predict-binary-cache.sh moved to scripts/maintainer.


* Haskell support
*** 32-bit vs 64-bit
Ceh usually installs 32-bit binaries.  64-bit is very nice, but there
are still a lot of environments with i686 machines not in amd64 mode.
E.g. on a barebone VPS with standard servers (apache, exim, etc.) you
can save a lot of memory and disk by choosing 32-bit.  Memory of these
two is especially expensive.

On the other hand, not having a 64-bit GHC is pain when you're trying
to write well performing code with bigger integers than 32-bit
(e.g. project euler).

For this reason, as an exception for GHC, we support turning to 64-bit
via an envvar.  If =$CEH_GHC64= is 1, then ghc, cabal, etc. will be
installed in 64-bit mode.  This of course only works, if your kernel
is amd64.  But note, that your userspace doesn't have to be amd64.
E.g. Debian ships amd64 kernel packages even for i686 installations.
So you can save memory on standard apps, but still perform well in
64-bit mode for project euler code.

If you're switching between ghc 32-bit and 64-bit mode, then it's
recommended to add =-$arch= to =install-dirs= user prefix in your
=~/.cabal/config= file, so the installed packages for the two
different architecture will land in different directories.


*** Builtin packages, shipped with ceh
The list can be found in =/opt/ceh/lib/Packages/GHC.nix=, feel free to
send pull requests if you need something.


*** Installation of pure haskell, non-FFI packages
The =/opt/ceh/bin/ghc= and =/opt/ceh/bin/cabal= scripts are wrapped in
a way that the whole toolchain (ghc, gcc, ld) is used from Nix.

This means that simple, non-FFI packages should just work out-of-the-box:
: cabal update
: vi ~/.cabal/config    (enable library-profiling if you want)
                        (and add -$arch to install-dirs user -> prefix,
                         if you want to use CEH_GHC64)
: cabal install hflags

But again, if we miss some basic, important package from the default
installation, please tell us, instead of cabal installing it on your
own machines.

*** Installation of FFI packages
For FFI packages to work, you of course need to have the required libs
installed, so the package can link against them.  There is a special
nix profile where we install all the nix packages for these libs to.
To install a new package to this profile, you can do this:
: #!/opt/ceh/lib/perl
:
: use strict;
: use warnings;
: use lib "/opt/ceh/lib";
: use CehInstall;
:
: ceh_nixpkgs_install_for_ghc('openssl', AUTOINIT);

AUTOINIT will be replaced by the current nixpkgs version and the
correct hashes when you first run this Perl script.  You can then even
commit this script to your project's version control, so your
teammates can reproduce the same environment.

After that you will be able to simply call cabal install:
: cabal install HsOpenSSL


* TODOs
+ Have an LD_PRELOAD library that hides =/usr/lib/mozilla/plugins= from Firefox's view.


* Design and other info for Ceh hackers, maintainers
*** Directory structure
=/opt/ceh/bin/=: wrapper scripts, they make sure that the wanted
package is already installed into ceh's bin nix profile
(=/nix/var/nix/profiles/ceh/bin=) and into the nix store
(=/nix/store=).  After this initialization they just exec the binary
from =/nix/store=,

=/opt/ceh/bin-user/=: gitignored directory for local exclusions, so the
end-user has the final say.  The =scripts/ceh-profile.sh= script puts
this directory in front of the =bin/= directory in PATH,

=/opt/ceh/emacs.d/=: contains =nix-mode.el= only, we used to
distribute emacs modules via Ceh, but it didn't work too well, it's
simpler to just use melpa,

=/opt/ceh/home=: gitignored symlink to the user's home, this is
extremely useful, because if Ceh is installed, you can simply use
=/opt/ceh/home= as a path to point to the user's home directory
without using the tilde expansion of the shell (that doesn't work in
syscalls or on the shebang line),

=/opt/ceh/lib/=: the Ceh (mainly Perl) internals,

=/opt/ceh/p/=: gitignored symlinks to the user's projects, so every project can
have an absolute symlink in =/opt/ceh/p/whatever-project=, like we
have =/opt/ceh/home= as an absolute path for the user's home directory,

=/opt/ceh/scripts/=: Ceh end-user scripts (install, purge, profile, upgrade),

=/opt/ceh/scripts/maintainer=: Ceh maintainer scripts,

=/nix=: not in Git, but doesn't store any important data.  Deleting
all the content and reinstalling Ceh will result in some compilation
and downloading, but everything will be recreated eventually,

=/nix/store=: contains the installed package roots.  Managed by nix
commands, like =nix-store=, =nix-env= and =nix-instantiate=,

=/nix/var/ceh_nixpkgs=: contains checked out versions of the nixpkgs
package collection, used and maintained by =lib/CehInstall.pm=,

=/nix/var/nix/profiles/ceh=: nix user environments (or profiles for
short).  A nix profile is a set of installed packages from
=/nix/store=.  The packages are merged together as a symlink farm in
the profile to show a unixish prefix root with =bin/=, =share/= and
other usual directories.  Old versions of the profiles can be garbage
collected by running =ceh_collect_garbage=,

=/nix/var/nix/profiles/ceh/bin=: the profile for packages installed by
wrapper scripts in =/opt/ceh/bin=,

=/nix/var/nix/profiles/ceh/ghc-libs=: the profile for clibs that are
needed to install FFI libraries with cabal,

=/nix/var/nix/profiles/ceh/tools=: the profile for tools used by ceh
itself (e.g. =which=).


*** Adding a new package to ceh
+ Simply create a wrapper script in =/opt/ceh/bin=, use =tmux= as an example,
+ use the autoinit feature to get the initial hash values:
  : ceh_nixpkgs_install_bin('newpkg', AUTOINIT);
  After running this wrapper once, the AUTOINIT will be replaced with
  the current nixpkgs version, derivation and out hash values.
+ add it to =scripts/maintainer/install-world.sh=,
+ send a github pull request.


*** Upgrading ceh to a new baseline
+ Update =lib/CehBase.pm= with a new hash, that you should get from
  http://nixos.org/releases/nixpkgs/, by choosing the most recent
  release and getting the git commit id from there (in my case b253eb0).
  To get the long hash id for that commit, do this:
: cd /nix/var/ceh_nixpkgs/git
: git fetch origin master:master
: git log -1 --format=oneline b253eb0 -- | cat

+ Update all the wrappers to have the new baseline versions.  For
  example to upgrade git:
: export CEH_AUTO_UPGRADE=1
: /opt/ceh/bin/git

This will update the hash in lib/Packages/Git.pm.

+ To update all the packages, use scripts/maintainer/install-world.sh.
  You may also find scripts/maintainer/predict-binary-cache.sh useful
  in selecting and checking a baseline.

+ =git grep= the old baseline hash to see that everything has been
  updated.


*** Upgrading nix inside ceh
+ Choose a new release from http://nixos.org/nix/download.html, read
  release notes, etc.

+ Download "Distribution-independent Nix bootstrap binaries for i686-linux".

+ tar xvfj nix-x.x.x.tar.bz2 /nix (it's a tarbomb, we only want /nix from it).

+ Update =lib/base.sh=, =lib/CehBase.pm= and =emacs.d/nix-mode.el=
  with the URL and the nix store path.

+ Update the =/opt/ceh/lib/perl= wrapper to point to the current perl.

+ Test if =ceh-upgrade.sh= is able to upgrade your old installation to
  the new one.

+ git commit, git push.


* Techtalk
: Title: Nix & ceh: reproducible power-user environment
:
: Abstract:
:
: It's common for engineers to use multiple GNU/Linux based computers
: daily, however it's not easy to achieve the same working environment
: on each of them.
:
: Computers owned by the company may run the company's linux variant,
: while computers at home run some common distribution.  Some of the
: running variants are already 64-bit, some are not.  Some of them is 2
: years old, some of them is fresh.
:
: On top of this mixture, it's hard to imagine to run exactly the same
: version of GNU Emacs or Mozilla Firefox (with all the hard to install
: plugins: flash, googletalk, java), without installing a common base
: operating system.
:
: This is the problem that I wanted a solution for, when I looked into
: the Nix package manager and the Nixpkgs package collection.  After a
: month of exploration I now have a working setup (called ceh), that I
: run on all of my computers to synchronize (via Git) the choice of
: software between them.
:
: In the techtalk I will present the fundamentals of Nix and show ceh,
: my setup around Nix.


* Design ideas for V2 (obsolete, these are mostly done)
** What issues do we have

*** More consistent nixpkgs version for different packages (DONE)
Currently ceh_nixpkgs_install supports using different nixpkgs
versions for every executable.  It's so efficient in what it does,
that we don't care at all about using the same nixpkgs in different
packages.

This seems to be working alright, but it's definitely responsible for
the pretty big usage of disk space in /nix/store.

It'd be nice to have some baseline nixpkgs version that all the easy
packages use: emacs, coq, androidsdk, ghc, python3, tmux, etc.  And
we'd only use newer nixpkgs version for packages that have to be new:
e.g. firefox, coursera-dl.  Of course we'd move the baseline quite
frequently, so we keep ourselves generally fresh (e.g. every 3
months?).

*** All these hashes are a bit painful to have (DONE: implemented autoinit)
We know, that nixpkgs_version+package_name+$NIXPKGS_CONFIG determines
the derivation and the output hash, so we only include those hashes to
catch an inconsistency when the result of this mapping is not
consistent with previous results on other machines.

This never have actually happened to anyone, I know.

Therefore maybe it's a bit too much work we do to achieve this
unneeded extra safety.  We definitely don't need both hashes, having
the derivation hash is totally superfluous.

If we decide to get rid of both hashes, then we still should have a
log file with the installations done or maybe a command to list all
the ceh installed packages with hashes, so users can compare there
machines to debug issues.

** Missing features
*** Easy upgradability for packages (DONE: see maintainer notes)
Let's assume that I'm willing to spend 2 minutes now to try out if
tmux works even with a newer nixpkgs (the next baseline, or whatever).
It'd be nice to have some environment variable that the user can
switch and will result in all installations trying to use some new
nixpkgs version.  After the user tests that everything works, she
should see the needed {hash, nixpkgs version, etc.} changes in
git status /opt/ceh.  So if everything works she would just have to
git commit.

Since some packages have version in their name (e.g. firefox21Wrapper
or haskellPackages_ghc763.ghc), this won't be ever totally automatic,
but in those cases at least the user will notice when ceh is using
some packages that are not even there in newer nixpkgs.

*** Install world (DONE)
Installation of all the packages currently found anywhere in /opt/ceh.
Without starting the installed programs of course.

I see two use cases for this.

First, on demand installs are very cool, but if you are going out to
have dinner anyways, than installing everything now and just using
your new machine when you come back is even better.

Second, we would have a way to test the whole system to see if stuff
can still get installed.  We could run this on a server every day or
so (and export the resulting hashes if we decide to get rid of those
on normal usage, so users will have something to compare their
machines to).
